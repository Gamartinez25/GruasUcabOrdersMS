// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrdersMS.Infrastructure.Database;

#nullable disable

namespace OrdersMS.Infrastructure.Migrations
{
    [DbContext(typeof(OrderMsContext))]
    [Migration("20241119162657_InicialMigration")]
    partial class InicialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrdersMS.Domain.Entities.Asegurado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FechaNacimiento")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Id");

                    b.ToTable("Asegurado");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.CostoAdicional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("CostoAdicional");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.OrdenCostoAdicional", b =>
                {
                    b.Property<Guid>("OrdenDeServicioId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CostoAdicionalId")
                        .HasColumnType("uuid");

                    b.Property<double>("Costo")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("OrdenDeServicioId", "CostoAdicionalId");

                    b.HasIndex("CostoAdicionalId");

                    b.ToTable("OrdenCostoAdicional");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.OrdenDeServicio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Administrador")
                        .HasColumnType("uuid");

                    b.Property<double>("CantidadKmExtra")
                        .HasColumnType("double precision");

                    b.Property<double>("CostoServiciosAdicionales")
                        .HasPrecision(12, 2)
                        .HasColumnType("double precision");

                    b.Property<double>("CostoTotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("double precision");

                    b.Property<double>("CostoTotalKm")
                        .HasPrecision(12, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("DetallesIncidente")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreDenunciante")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NumeroDocumentoDenunciante")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<Guid>("Operador")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PolizaAseguradoId")
                        .HasColumnType("uuid");

                    b.Property<string>("TipoDocumentoDenunciante")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Id");

                    b.HasIndex("PolizaAseguradoId");

                    b.ToTable("OrdenDeServicio");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.Poliza", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double>("Costo")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Poliza");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.PolizaAsegurado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anio")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<Guid>("AseguradoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FechaInicioCobertura")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("FechaVencimientoCobertura")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<Guid>("PolizaId")
                        .HasColumnType("uuid");

                    b.Property<string>("TipoVehiculo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("AseguradoId");

                    b.HasIndex("PolizaId")
                        .IsUnique();

                    b.ToTable("PolizaAsegurado");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.Tarifa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CostoBase")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<double>("CostoPorKm")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<double>("DistanciaKm")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Tarifa");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.OrdenCostoAdicional", b =>
                {
                    b.HasOne("OrdersMS.Domain.Entities.CostoAdicional", "CostoAdicional")
                        .WithMany("OrdenCostosAdicionales")
                        .HasForeignKey("CostoAdicionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrdersMS.Domain.Entities.OrdenDeServicio", "OrdenDeServicio")
                        .WithMany("OrdenCostosAdicionales")
                        .HasForeignKey("OrdenDeServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostoAdicional");

                    b.Navigation("OrdenDeServicio");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.OrdenDeServicio", b =>
                {
                    b.HasOne("OrdersMS.Domain.Entities.PolizaAsegurado", "PolizaAsegurado")
                        .WithMany("OrdenesDeServicio")
                        .HasForeignKey("PolizaAseguradoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolizaAsegurado");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.Poliza", b =>
                {
                    b.HasOne("OrdersMS.Domain.Entities.Tarifa", "Tarifa")
                        .WithOne("Poliza")
                        .HasForeignKey("OrdersMS.Domain.Entities.Poliza", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarifa");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.PolizaAsegurado", b =>
                {
                    b.HasOne("OrdersMS.Domain.Entities.Asegurado", "Asegurado")
                        .WithMany("PolizasAsegurados")
                        .HasForeignKey("AseguradoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrdersMS.Domain.Entities.Poliza", "Poliza")
                        .WithOne("PolizaAsegurado")
                        .HasForeignKey("OrdersMS.Domain.Entities.PolizaAsegurado", "PolizaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asegurado");

                    b.Navigation("Poliza");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.Asegurado", b =>
                {
                    b.Navigation("PolizasAsegurados");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.CostoAdicional", b =>
                {
                    b.Navigation("OrdenCostosAdicionales");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.OrdenDeServicio", b =>
                {
                    b.Navigation("OrdenCostosAdicionales");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.Poliza", b =>
                {
                    b.Navigation("PolizaAsegurado")
                        .IsRequired();
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.PolizaAsegurado", b =>
                {
                    b.Navigation("OrdenesDeServicio");
                });

            modelBuilder.Entity("OrdersMS.Domain.Entities.Tarifa", b =>
                {
                    b.Navigation("Poliza")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
